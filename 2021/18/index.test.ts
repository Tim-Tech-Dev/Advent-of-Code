import "mocha";
import { expect } from "chai";
import {
    stage0,
    stage1,
    parse,
    explode,
    split,
    add,
    magnitude,
    sum,
} from "./index";

describe("[2021-18]", () => {
    it("explode function", () => {
        const t_explode = (s: string) => explode(parse(s)).join("");

        expect(t_explode("[[[[[9,8],1],2],3],4]")).to.equal(
            "[[[[0,9],2],3],4]",
        );

        expect(t_explode("[7,[6,[5,[4,[3,2]]]]]")).to.equal(
            "[7,[6,[5,[7,0]]]]",
        );

        expect(t_explode("[[6,[5,[4,[3,2]]]],1]")).to.equal(
            "[[6,[5,[7,0]]],3]",
        );

        expect(t_explode("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]")).to.equal(
            "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]",
        );

        expect(t_explode("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")).to.equal(
            "[[3,[2,[8,0]]],[9,[5,[7,0]]]]",
        );
    });

    it("split function", () => {
        const t_split = (s: string) => split(parse(s)).join("");

        expect(t_split("[[[[0,7],4],[15,[0,13]]],[1,1]]")).to.equal(
            "[[[[0,7],4],[[7,8],[0,13]]],[1,1]]",
        );

        expect(t_split("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]")).to.equal(
            "[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]",
        );
    });

    it("add function", () => {
        const t_add = (a: string, b: string) =>
            add(parse(a), parse(b)).join("");

        expect(t_add("[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]")).to.equal(
            "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]",
        );

        expect(
            t_add(
                "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
                "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
            ),
        ).to.equal("[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]");

        expect(
            t_add(
                "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
                "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
            ),
        ).to.equal(
            "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
        );

        expect(
            t_add(
                "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
                "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
            ),
        ).to.equal(
            "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
        );

        expect(
            t_add(
                "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
                "[7,[5,[[3,8],[1,4]]]]",
            ),
        ).to.equal(
            "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
        );

        expect(
            t_add(
                "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
                "[[2,[2,2]],[8,[8,1]]]",
            ),
        ).to.equal("[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]");

        expect(
            t_add(
                "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
                "[2,9]",
            ),
        ).to.equal("[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]");

        expect(
            t_add(
                "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
                "[1,[[[9,3],9],[[9,0],[0,7]]]]",
            ),
        ).to.equal(
            "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
        );

        expect(
            t_add(
                "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
                "[[[5,[7,4]],7],1]",
            ),
        ).to.equal("[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]");

        expect(
            t_add(
                "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
                "[[[[4,2],2],6],[8,7]]",
            ),
        ).to.equal("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]");
    });

    it("sum function", () => {
        const t_sum = (...s: string[]) => sum(s.map((v) => parse(v))).join("");

        expect(t_sum("[1,1]", "[2,2]", "[3,3]", "[4,4]")).to.equal(
            "[[[[1,1],[2,2]],[3,3]],[4,4]]",
        );

        expect(t_sum("[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]")).to.equal(
            "[[[[3,0],[5,3]],[4,4]],[5,5]]",
        );

        expect(
            t_sum("[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]", "[6,6]"),
        ).to.equal("[[[[5,0],[7,4]],[5,5]],[6,6]]");

        expect(
            t_sum(
                "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
                "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
                "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
                "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
                "[7,[5,[[3,8],[1,4]]]]",
                "[[2,[2,2]],[8,[8,1]]]",
                "[2,9]",
                "[1,[[[9,3],9],[[9,0],[0,7]]]]",
                "[[[5,[7,4]],7],1]",
                "[[[[4,2],2],6],[8,7]]",
            ),
        ).to.equal("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]");
    });

    it("magnitude function", () => {
        const t_mag = (s: string) => magnitude(parse(s));

        expect(t_mag("[9,1]")).to.equal(29);

        expect(t_mag("[1,9]")).to.equal(21);

        expect(t_mag("[[9,1],[1,9]]")).to.equal(129);

        expect(t_mag("[9,1]")).to.equal(29);

        expect(t_mag("[1,9]")).to.equal(21);

        expect(t_mag("[[9,1],[1,9]]")).to.equal(129);

        expect(t_mag("[[1,2],[[3,4],5]]")).to.equal(143);

        expect(t_mag("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")).to.equal(1384);

        expect(t_mag("[[[[1,1],[2,2]],[3,3]],[4,4]]")).to.equal(445);

        expect(t_mag("[[[[3,0],[5,3]],[4,4]],[5,5]]")).to.equal(791);

        expect(t_mag("[[[[5,0],[7,4]],[5,5]],[6,6]]")).to.equal(1137);

        expect(
            t_mag("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"),
        ).to.equal(3488);
    });

    const input = [
        "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]",
        "[[[5,[2,8]],4],[5,[[9,9],0]]]",
        "[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]",
        "[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]",
        "[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]",
        "[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]",
        "[[[[5,4],[7,7]],8],[[8,3],8]]",
        "[[9,3],[[9,9],[6,[4,9]]]]",
        "[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]",
        "[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]",
    ];

    it("stage 0: The magnitude of the final sum should be 4140", () => {
        const res = stage0(input);
        expect(res).to.equal(4140);
    });

    it("stage 1: The largest magnitude of any sum of two different snailfish numbers from the homework assignment should be 3993", () => {
        const res = stage1(input);
        expect(res?.first.join("")).to.equal(
            "[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]",
        );
        expect(res?.second.join("")).to.equal(
            "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]",
        );
        expect(res?.res.join("")).to.equal(
            "[[[[7,8],[6,6]],[[6,0],[7,7]]],[[[7,8],[8,8]],[[7,9],[0,6]]]]",
        );
        expect(res?.mag).to.equal(3993);
    });
});
